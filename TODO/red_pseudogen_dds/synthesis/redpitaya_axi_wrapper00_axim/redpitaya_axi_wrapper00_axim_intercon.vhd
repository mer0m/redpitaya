---------------------------------------------------------------------------
-- Company     : Automaticaly generated by POD
-- Author(s)   : 
--
-- Creation Date : 2016-09-13
-- File          : redpitaya_axi_wrapper00_axim.vhd
--
-- Abstract :
-- Connect slaves to axim from redpitaya_axi_wrapper00
--
---------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;

Entity redpitaya_axi_wrapper00_axim is
    port
    (

        -- nco_axis connection
        nco_s00_axi_aclk                         : out  std_logic;
        nco_s00_axi_reset                        : out  std_logic;
        nco_s00_axi_araddr                       : out  std_logic_vector(1 downto 0);
        nco_s00_axi_arprot                       : out  std_logic_vector(2 downto 0);
        nco_s00_axi_arready                      : in   std_logic;
        nco_s00_axi_arvalid                      : out  std_logic;
        nco_s00_axi_awaddr                       : out  std_logic_vector(1 downto 0);
        nco_s00_axi_awprot                       : out  std_logic_vector(2 downto 0);
        nco_s00_axi_awready                      : in   std_logic;
        nco_s00_axi_awvalid                      : out  std_logic;
        nco_s00_axi_bready                       : out  std_logic;
        nco_s00_axi_bresp                        : in   std_logic_vector(1 downto 0);
        nco_s00_axi_bvalid                       : in   std_logic;
        nco_s00_axi_rdata                        : in   std_logic_vector(31 downto 0);
        nco_s00_axi_rready                       : out  std_logic;
        nco_s00_axi_rresp                        : in   std_logic_vector(1 downto 0);
        nco_s00_axi_rvalid                       : in   std_logic;
        nco_s00_axi_wdata                        : out  std_logic_vector(31 downto 0);
        nco_s00_axi_wready                       : in   std_logic;
        nco_s00_axi_wstrb                        : out  std_logic_vector(3 downto 0);
        nco_s00_axi_wvalid                       : out  std_logic;

        -- gene_axis connection
        gene_s00_axi_aclk                        : out  std_logic;
        gene_s00_axi_reset                       : out  std_logic;
        gene_s00_axi_araddr                      : out  std_logic_vector(1 downto 0);
        gene_s00_axi_arprot                      : out  std_logic_vector(2 downto 0);
        gene_s00_axi_arready                     : in   std_logic;
        gene_s00_axi_arvalid                     : out  std_logic;
        gene_s00_axi_awaddr                      : out  std_logic_vector(1 downto 0);
        gene_s00_axi_awprot                      : out  std_logic_vector(2 downto 0);
        gene_s00_axi_awready                     : in   std_logic;
        gene_s00_axi_awvalid                     : out  std_logic;
        gene_s00_axi_bready                      : out  std_logic;
        gene_s00_axi_bresp                       : in   std_logic_vector(1 downto 0);
        gene_s00_axi_bvalid                      : in   std_logic;
        gene_s00_axi_rdata                       : in   std_logic_vector(31 downto 0);
        gene_s00_axi_rready                      : out  std_logic;
        gene_s00_axi_rresp                       : in   std_logic_vector(1 downto 0);
        gene_s00_axi_rvalid                      : in   std_logic;
        gene_s00_axi_wdata                       : out  std_logic_vector(31 downto 0);
        gene_s00_axi_wready                      : in   std_logic;
        gene_s00_axi_wstrb                       : out  std_logic_vector(3 downto 0);
        gene_s00_axi_wvalid                      : out  std_logic;

        -- redpitaya_axi_wrapper00_axim connection
        redpitaya_axi_wrapper00_M00_AXI_clk_o    : in   std_logic;
        redpitaya_axi_wrapper00_M00_AXI_rst_o    : in   std_logic;
        redpitaya_axi_wrapper00_M00_AXI_araddr   : in   std_logic_vector(31 downto 0);
        redpitaya_axi_wrapper00_M00_AXI_arprot   : in   std_logic_vector(2 downto 0);
        redpitaya_axi_wrapper00_M00_AXI_arready  : out  std_logic;
        redpitaya_axi_wrapper00_M00_AXI_arvalid  : in   std_logic;
        redpitaya_axi_wrapper00_M00_AXI_awaddr   : in   std_logic_vector(31 downto 0);
        redpitaya_axi_wrapper00_M00_AXI_awprot   : in   std_logic_vector(2 downto 0);
        redpitaya_axi_wrapper00_M00_AXI_awready  : out  std_logic;
        redpitaya_axi_wrapper00_M00_AXI_awvalid  : in   std_logic;
        redpitaya_axi_wrapper00_M00_AXI_bready   : in   std_logic;
        redpitaya_axi_wrapper00_M00_AXI_bresp    : out  std_logic_vector(1 downto 0);
        redpitaya_axi_wrapper00_M00_AXI_bvalid   : out  std_logic;
        redpitaya_axi_wrapper00_M00_AXI_rdata    : out  std_logic_vector(31 downto 0);
        redpitaya_axi_wrapper00_M00_AXI_rready   : in   std_logic;
        redpitaya_axi_wrapper00_M00_AXI_rresp    : out  std_logic_vector(1 downto 0);
        redpitaya_axi_wrapper00_M00_AXI_rvalid   : out  std_logic;
        redpitaya_axi_wrapper00_M00_AXI_wdata    : in   std_logic_vector(31 downto 0);
        redpitaya_axi_wrapper00_M00_AXI_wready   : out  std_logic;
        redpitaya_axi_wrapper00_M00_AXI_wstrb    : in   std_logic_vector(3 downto 0);
        redpitaya_axi_wrapper00_M00_AXI_wvalid   : in   std_logic
    );
end entity;

architecture redpitaya_axi_wrapper00_axim_1 of redpitaya_axi_wrapper00_axim is
    signal araddr_s             : std_logic_vector(31 downto 0);
    signal awaddr_s             : std_logic_vector(31 downto 0);
    signal writedata32_s        : std_logic_vector(31 downto 0);
    signal aw_nco_axis_cs       : std_logic := '0' ;
    signal ar_nco_axis_cs       : std_logic := '0' ;
    signal w_nco_axis_cs        : std_logic := '0' ;
    signal r_nco_axis_cs        : std_logic := '0' ;
    signal aw_gene_axis_cs      : std_logic := '0' ;
    signal ar_gene_axis_cs      : std_logic := '0' ;
    signal w_gene_axis_cs       : std_logic := '0' ;
    signal r_gene_axis_cs       : std_logic := '0' ;
begin
    writedata32_s <= redpitaya_axi_wrapper00_M00_AXI_wdata;

    araddr_s <= redpitaya_axi_wrapper00_M00_AXI_araddr;
    awaddr_s <= redpitaya_axi_wrapper00_M00_AXI_awaddr;

    -- Clock and Reset connection
    nco_s00_axi_reset <= redpitaya_axi_wrapper00_M00_AXI_rst_o;
    nco_s00_axi_aclk <= redpitaya_axi_wrapper00_M00_AXI_clk_o;
    gene_s00_axi_reset <= redpitaya_axi_wrapper00_M00_AXI_rst_o;
    gene_s00_axi_aclk <= redpitaya_axi_wrapper00_M00_AXI_clk_o;
    -----------------------

    -- Address decoding  --
    -----------------------
    nco_s00_axi_araddr <= araddr_s(3 downto 2);
    nco_s00_axi_awaddr <= awaddr_s(3 downto 2);
    gene_s00_axi_araddr <= araddr_s(3 downto 2);
    gene_s00_axi_awaddr <= awaddr_s(3 downto 2);

    decodeproc : process(redpitaya_axi_wrapper00_M00_AXI_clk_o, redpitaya_axi_wrapper00_M00_AXI_rst_o)
    begin
        if redpitaya_axi_wrapper00_M00_AXI_rst_o='1' then
            aw_nco_axis_cs <= '0';
            w_nco_axis_cs <= '0';
            ar_nco_axis_cs <= '0';
            r_nco_axis_cs <= '0';
            aw_gene_axis_cs <= '0';
            w_gene_axis_cs <= '0';
            ar_gene_axis_cs <= '0';
            r_gene_axis_cs <= '0';
        elsif rising_edge(redpitaya_axi_wrapper00_M00_AXI_clk_o) then

            if awaddr_s(31 downto 4)="0000000000000000000000000000" and redpitaya_axi_wrapper00_M00_AXI_awvalid='1' then
                aw_nco_axis_cs <= '1';
            else
                aw_nco_axis_cs <= '0';
            end if;
            if awaddr_s(31 downto 4)="0000000000000000000000000000" and redpitaya_axi_wrapper00_M00_AXI_wvalid='1' then
                w_nco_axis_cs <= '1';
            else
                w_nco_axis_cs <= '0';
            end if;
            if araddr_s(31 downto 4)="0000000000000000000000000000" and redpitaya_axi_wrapper00_M00_AXI_arvalid='1' then
                ar_nco_axis_cs <= '1';
            else
                ar_nco_axis_cs <= '0';
            end if;
            if araddr_s(31 downto 4)="0000000000000000000000000000" and redpitaya_axi_wrapper00_M00_AXI_rready='1' then
                r_nco_axis_cs <= '1';
            else
                r_nco_axis_cs <= '0';
            end if;

            if awaddr_s(31 downto 4)="0000000000000000000000000001" and redpitaya_axi_wrapper00_M00_AXI_awvalid='1' then
                aw_gene_axis_cs <= '1';
            else
                aw_gene_axis_cs <= '0';
            end if;
            if awaddr_s(31 downto 4)="0000000000000000000000000001" and redpitaya_axi_wrapper00_M00_AXI_wvalid='1' then
                w_gene_axis_cs <= '1';
            else
                w_gene_axis_cs <= '0';
            end if;
            if araddr_s(31 downto 4)="0000000000000000000000000001" and redpitaya_axi_wrapper00_M00_AXI_arvalid='1' then
                ar_gene_axis_cs <= '1';
            else
                ar_gene_axis_cs <= '0';
            end if;
            if araddr_s(31 downto 4)="0000000000000000000000000001" and redpitaya_axi_wrapper00_M00_AXI_rready='1' then
                r_gene_axis_cs <= '1';
            else
                r_gene_axis_cs <= '0';
            end if;

        end if;
    end process decodeproc;

    -----------------------------
    -- Control signals to slave
    -----------------------------

    -- for nco
    nco_s00_axi_awprot <= redpitaya_axi_wrapper00_M00_AXI_awprot when (redpitaya_axi_wrapper00_M00_AXI_awvalid and aw_nco_axis_cs ) = '1' else (others => '0');
    nco_s00_axi_awvalid <= (redpitaya_axi_wrapper00_M00_AXI_awvalid and aw_nco_axis_cs );
    nco_s00_axi_wvalid <= (redpitaya_axi_wrapper00_M00_AXI_wvalid and w_nco_axis_cs );
    nco_s00_axi_bready <= (redpitaya_axi_wrapper00_M00_AXI_bready and w_nco_axis_cs );
    nco_s00_axi_wdata <= writedata32_s when (redpitaya_axi_wrapper00_M00_AXI_wvalid and w_nco_axis_cs ) = '1' else (others => '0');
    nco_s00_axi_wstrb <= redpitaya_axi_wrapper00_M00_AXI_wstrb when (redpitaya_axi_wrapper00_M00_AXI_wvalid and w_nco_axis_cs ) = '1' else (others => '0');
    nco_s00_axi_arprot <= redpitaya_axi_wrapper00_M00_AXI_arprot when (redpitaya_axi_wrapper00_M00_AXI_arvalid and ar_nco_axis_cs ) = '1' else (others => '0');
    nco_s00_axi_arvalid <= (redpitaya_axi_wrapper00_M00_AXI_arvalid and ar_nco_axis_cs );
    nco_s00_axi_rready <= (redpitaya_axi_wrapper00_M00_AXI_rready and r_nco_axis_cs );

    -- for gene
    gene_s00_axi_awprot <= redpitaya_axi_wrapper00_M00_AXI_awprot when (redpitaya_axi_wrapper00_M00_AXI_awvalid and aw_gene_axis_cs ) = '1' else (others => '0');
    gene_s00_axi_awvalid <= (redpitaya_axi_wrapper00_M00_AXI_awvalid and aw_gene_axis_cs );
    gene_s00_axi_wvalid <= (redpitaya_axi_wrapper00_M00_AXI_wvalid and w_gene_axis_cs );
    gene_s00_axi_bready <= (redpitaya_axi_wrapper00_M00_AXI_bready and w_gene_axis_cs );
    gene_s00_axi_wdata <= writedata32_s when (redpitaya_axi_wrapper00_M00_AXI_wvalid and w_gene_axis_cs ) = '1' else (others => '0');
    gene_s00_axi_wstrb <= redpitaya_axi_wrapper00_M00_AXI_wstrb when (redpitaya_axi_wrapper00_M00_AXI_wvalid and w_gene_axis_cs ) = '1' else (others => '0');
    gene_s00_axi_arprot <= redpitaya_axi_wrapper00_M00_AXI_arprot when (redpitaya_axi_wrapper00_M00_AXI_arvalid and ar_gene_axis_cs ) = '1' else (others => '0');
    gene_s00_axi_arvalid <= (redpitaya_axi_wrapper00_M00_AXI_arvalid and ar_gene_axis_cs );
    gene_s00_axi_rready <= (redpitaya_axi_wrapper00_M00_AXI_rready and r_gene_axis_cs );


    -------------------------------
    -- Control signal for master --
    -------------------------------
    redpitaya_axi_wrapper00_M00_AXI_bresp <=  nco_s00_axi_bresp when w_nco_axis_cs='1' else
                                       gene_s00_axi_bresp when w_gene_axis_cs='1' else
                                       (others => '0');
    redpitaya_axi_wrapper00_M00_AXI_bvalid <= (nco_s00_axi_bvalid and w_nco_axis_cs) or 
                                (gene_s00_axi_bvalid and w_gene_axis_cs);
    redpitaya_axi_wrapper00_M00_AXI_rvalid <= (nco_s00_axi_rvalid and r_nco_axis_cs) or 
                                (gene_s00_axi_rvalid and r_gene_axis_cs);
    redpitaya_axi_wrapper00_M00_AXI_wready <= (nco_s00_axi_wready and w_nco_axis_cs) or 
                                (gene_s00_axi_wready and w_gene_axis_cs);
    redpitaya_axi_wrapper00_M00_AXI_rresp <=  nco_s00_axi_rresp when r_nco_axis_cs='1' else
                                       gene_s00_axi_rresp when r_gene_axis_cs='1' else
                                       (others => '0');
    redpitaya_axi_wrapper00_M00_AXI_arready <= (nco_s00_axi_arready and ar_nco_axis_cs) or 
                                (gene_s00_axi_arready and ar_gene_axis_cs);
    redpitaya_axi_wrapper00_M00_AXI_awready <= (nco_s00_axi_awready and aw_nco_axis_cs) or 
                                (gene_s00_axi_awready and aw_gene_axis_cs);
    redpitaya_axi_wrapper00_M00_AXI_rdata <=  nco_s00_axi_rdata when r_nco_axis_cs='1' else
                                       gene_s00_axi_rdata when r_gene_axis_cs='1' else
                                       (others => '0');

end architecture redpitaya_axi_wrapper00_axim_1;
